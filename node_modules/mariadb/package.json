{
  "_from": "mariadb",
  "_id": "mariadb@2.4.0",
  "_inBundle": false,
  "_integrity": "sha512-78zrj9SpF6I3eVWMMkdm+SEfcsMb/uWVKPo7pKhhCfuGywEf3I1dK0ewSTjD0SyTEgSEuWn/H/I4TIErGgYTCQ==",
  "_location": "/mariadb",
  "_phantomChildren": {
    "moment": "2.24.0",
    "safer-buffer": "2.1.2"
  },
  "_requested": {
    "escapedName": "mariadb",
    "fetchSpec": "latest",
    "name": "mariadb",
    "raw": "mariadb",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mariadb/-/mariadb-2.4.0.tgz",
  "_shasum": "870a679a6c91d29b99cc1a1d2f129674e6b8e676",
  "_shrinkwrap": null,
  "_spec": "mariadb",
  "_where": "/Users/bhardwaj/GitHub/web_Projects/ledger_backend",
  "author": {
    "email": "diego.dupin@mariadb.com",
    "name": "Diego Dupin"
  },
  "bugs": {
    "url": "https://jira.mariadb.org/projects/CONJS/"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@types/geojson": "^7946.0.7",
    "@types/node": "^13.9.8",
    "denque": "^1.4.1",
    "iconv-lite": "^0.5.1",
    "long": "^4.0.0",
    "moment-timezone": "^0.5.31",
    "please-upgrade-node": "^3.2.0"
  },
  "deprecated": false,
  "description": "fast mariadb/mysql connector.",
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^2.26.0",
    "@typescript-eslint/parser": "^2.26.0",
    "benchmark": "^2.1.4",
    "chai": "^4.2.0",
    "codecov": "^3.6.4",
    "colors": "^1.4.0",
    "dom-parser": "^0.1.6",
    "error-stack-parser": "^2.0.6",
    "eslint": "^6.6.0",
    "eslint-config-prettier": "^6.10.1",
    "eslint-plugin-markdown": "^1.0.1",
    "eslint-plugin-prettier": "^3.1.0",
    "mocha": "^7.1.1",
    "mocha-lcov-reporter": "^1.3.0",
    "nyc": "^15.0.0",
    "prettier": "^2.0.2",
    "typescript": "^3.7.5"
  },
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "engines": {
    "node": ">= 10.13"
  },
  "files": [
    "callback.js",
    "lib",
    "promise.js",
    "types/index.d.ts"
  ],
  "homepage": "https://github.com/mariadb-corporation/mariadb-connector-nodejs#readme",
  "keywords": [
    "client",
    "connector",
    "driver",
    "mariadb",
    "mysql"
  ],
  "license": "LGPL-2.1-or-later",
  "main": "promise.js",
  "name": "mariadb",
  "optionalDependencies": {},
  "private": false,
  "readme": "<p align=\"center\">\r\n  <a href=\"http://mariadb.com/\">\r\n    <img src=\"https://mariadb.com/kb/static/images/logo-2018-black.png\">\r\n  </a>\r\n</p>\r\n\r\n# MariaDB Node.js connector\r\n\r\n[![npm package][npm-image]][npm-url] \r\n[![Linux Build][travis-image]][travis-url]\r\n[![Windows status][appveyor-image]][appveyor-url]\r\n[![License (LGPL version 2.1)][licence-image]][licence-url]\r\n[![codecov][codecov-image]][codecov-url]\r\n\r\n**Non-blocking MariaDB and MySQL client for Node.js.**\r\n\r\nMariaDB and MySQL client, 100% JavaScript, with TypeScript definition, with the Promise API.\r\n\r\nversion before 2.4 is compatible with Node.js 6+\r\nversion after 2.4 is compatible with Node.js 10+\r\n\r\n\r\n## Documentation\r\n\r\nSee [promise documentation](https://github.com/mariadb-corporation/mariadb-connector-nodejs/blob/master/documentation/promise-api.md) for detailed API. \r\n\r\n[Callback documentation](https://github.com/mariadb-corporation/mariadb-connector-nodejs/blob/master/documentation/callback-api.md) describe the callback wrapper for compatibility with existing drivers.\r\n   \r\n## Why a New Client?\r\n\r\nWhile there are existing MySQL clients that work with MariaDB, (such as the [`mysql`](https://www.npmjs.com/package/mysql) and [`mysql2`](https://www.npmjs.com/package/mysql2) clients), the MariaDB Node.js Connector offers new functionality, like [Insert Streaming](#insert-streaming), [Pipelining](#pipelining), [ed25519 plugin authentication](https://mariadb.org/history-of-mysql-mariadb-authentication-protocols/) while making no compromises on performance.\r\n\r\n\r\n### Insert Streaming \r\n\r\nUsing a Readable stream in your application, you can stream `INSERT` statements to MariaDB through the Connector.\r\n\r\n```javascript\r\n    \r\n    https.get('https://someContent', readableStream => {\r\n        //readableStream implement Readable, driver will stream data to database \r\n        connection.query(\"INSERT INTO myTable VALUE (?)\", [readableStream]);\r\n    });\r\n```\r\n \r\n### Pipelining\r\n\r\nWith Pipelining, the Connector sends commands without waiting for server results, preserving order.  For instance, consider the use of executing two `INSERT`  statements.\r\n\r\n<p align=\"center\">\r\n    <img src=\"./documentation/misc/pip.png\">\r\n</p>\r\n\r\nThe Connector doesn't wait for query results before sending the next `INSERT` statement. Instead, it sends queries one after the other, avoiding much of the network latency.\r\n\r\nFor more information, see the [Pipelining](/documentation/pipelining.md) documentation.\r\n \r\n### Bulk insert\r\n\r\nSome use cases require a large amount of data to be inserted into a database table. By using batch processing, these queries can be sent to the database in one call, thus improving performance.\r\n\r\nFor more information, see the [Batch](/documentation/batch.md) documentation.\r\n\r\n\r\n## Benchmarks\r\n\r\nMariaDB provides benchmarks comparing the Connector with popular Node.js MySQL clients, including: \r\n\r\n* [`promise-mysql`](https://www.npmjs.com/package/promise-mysql) version 4.0.4 + [`mysql`](https://www.npmjs.com/package/mysql) version 2.17.1 \r\n* [`mysql2`](https://www.npmjs.com/package/mysql2) version 1.6.5\r\n\r\n```\r\npromise-mysql  : 646 ops/sec ±2.20%\r\nmysql2         : 746 ops/sec ±2.35%\r\nmariadb        : 961 ops/sec ±2.82%\r\n```\r\n\r\nquery: **SELECT &lt; all mysql fields &gt;, 1 FROM mysql.user LIMIT 1**\r\n\r\n<img src=\"./documentation/misc/bench.png\" width=\"559\" height=\"209\"/>\r\n\r\nFor more information, see the [Benchmarks](/documentation/benchmarks.md) page.\r\n\r\n## Quick Start\r\n\r\nThe MariaDB Connector is available through the Node.js repositories.  You can install it using npm :\r\n\r\n```\r\n$ npm install mariadb\r\n```\r\n\r\nUsing ECMAScript < 2017:\r\n\r\n```js\r\nconst mariadb = require('mariadb');\r\nconst pool = mariadb.createPool({host: process.env.DB_HOST, user: process.env.DB_USER, connectionLimit: 5});\r\npool.getConnection()\r\n    .then(conn => {\r\n    \r\n      conn.query(\"SELECT 1 as val\")\r\n        .then(rows => { // rows: [ {val: 1}, meta: ... ]\r\n          return conn.query(\"INSERT INTO myTable value (?, ?)\", [1, \"mariadb\"]);\r\n        })\r\n        .then(res => { // res: { affectedRows: 1, insertId: 1, warningStatus: 0 }\r\n          conn.release(); // release to pool\r\n        })\r\n        .catch(err => {\r\n          conn.release(); // release to pool\r\n        })\r\n        \r\n    }).catch(err => {\r\n      //not connected\r\n    });\r\n```\r\n\r\nUsing ECMAScript 2017:\r\n\r\n```js\r\nconst mariadb = require('mariadb');\r\nconst pool = mariadb.createPool({host: process.env.DB_HOST, user: process.env.DB_USER, connectionLimit: 5});\r\n\r\nasync function asyncFunction() {\r\n  let conn;\r\n  try {\r\n\r\n\tconn = await pool.getConnection();\r\n\tconst rows = await conn.query(\"SELECT 1 as val\");\r\n\t// rows: [ {val: 1}, meta: ... ]\r\n\r\n\tconst res = await conn.query(\"INSERT INTO myTable value (?, ?)\", [1, \"mariadb\"]);\r\n\t// res: { affectedRows: 1, insertId: 1, warningStatus: 0 }\r\n\r\n  } catch (err) {\r\n\tthrow err;\r\n  } finally {\r\n\tif (conn) conn.release(); //release to pool\r\n  }\r\n}\r\n```\r\n\r\n## Contributing \r\n\r\nIf you would like to contribute to the MariaDB Node.js Connector, please follow the instructions given in the [Developers Guide.](/documentation/developers-guide.md)\r\n\r\nTo file an issue or follow the development, see [JIRA](https://jira.mariadb.org/projects/CONJS/issues/).\r\n\r\n\r\n[travis-image]:https://travis-ci.org/mariadb-corporation/mariadb-connector-nodejs.svg?branch=master\r\n[travis-url]:https://travis-ci.org/mariadb-corporation/mariadb-connector-nodejs\r\n[npm-image]:https://img.shields.io/npm/v/mariadb.svg\r\n[npm-url]:http://npmjs.org/package/mariadb\r\n[appveyor-image]:https://ci.appveyor.com/api/projects/status/558kpv0j1r545pgq/branch/master?svg=true\r\n[appveyor-url]:https://ci.appveyor.com/project/rusher/mariadb-connector-nodejs-w8k25\r\n[licence-image]:https://img.shields.io/badge/license-GNU%20LGPL%20version%202.1-green.svg?style=flat-square\r\n[licence-url]:http://opensource.org/licenses/LGPL-2.1\r\n[codecov-image]:https://codecov.io/gh/mariadb-corporation/mariadb-connector-nodejs/branch/master/graph/badge.svg\r\n[codecov-url]:https://codecov.io/gh/mariadb-corporation/mariadb-connector-nodejs",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mariadb-corporation/mariadb-connector-nodejs.git"
  },
  "scripts": {
    "benchmark": "node ./benchmarks/benchmarks.js",
    "coverage": "npm run coverage:test && npm run coverage:report",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov && codecov",
    "coverage:test": "nyc mocha \"test/**/*.js\"",
    "generate": "node ./tools/generate-mariadb.js",
    "test": "npm run test:types-prettier && npm run test:prettier && npm run test:types && npm run test:lint && npm run test:base",
    "test:base": "mocha \"test/**/*.js\" ",
    "test:lint": "eslint \"{lib,test}/**/*.js\" ",
    "test:prettier": "prettier --write \"{tools,lib,test,benchmarks}/**/*.js\"",
    "test:types": "eslint \"types/*.ts\" ",
    "test:types-prettier": "prettier --write \"types/*.ts\""
  },
  "types": "types/index.d.ts",
  "version": "2.4.0"
}
